#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("project104-node-api:server");
var http = require("http");
const IO = require("socket.io");
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

// 创建socket服务
var socketIO = IO(server);

socketIO.on("connection", socket => {
  var user = "";
  var id = "";
  console.log("New client connected");

  socket.on("join", (newID, userType) => {
    id = newID;
    user = userType;
    socket.join(newID); // 加入房间
    console.log(user + "加入了" + newID);
  });
  socket.on("leave", function(oldID, userType) {
    socket.leave(oldID);
    console.log(userType + "退出房間: " + oldID);
  });

  // disconnect is fired when a client leaves the server
  socket.on("disconnect", () => {
    console.log("斷線");
  });

  // 接收用户消息,发送相应的房间
  socket.on("ADD", (text, userType, Time, roomID) => {
    socketIO.sockets.in(roomID).emit("ADDClient", text, userType, Time, roomID);
    // socketIO.emit("ADDClient", text, userType, Time, roomID);
    // socketIO.to(roomID).emit('ADD', text, userType,Time,roomID);
    console.log("ROOM:", roomID, userType, "發送: ", text, Time);
    console.log("後端產生對話!");
  });

  socket.on("forceDisconnect", function(oldID, userType) {
    socket.disconnect();
  });
});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
